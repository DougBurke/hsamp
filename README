
Can we access SAMP via Haskell?

http://www.ivoa.net/Documents/REC/App/SAMP-20090421.html

http://software.astrogrid.org/doc/p/jsamp/1.0/

http://hackage.haskell.org/packages/archive/haxr/3000.2.1/doc/html/Network-XmlRpc-Client.html

NOTE:

*Network.XmlRpc.Client> let url = "http://127.0.0.1:55071/xmlrpc"
*Network.XmlRpc.Client> let secret = "8fe977378fa002e6"
*Network.XmlRpc.Client> let regClient :: String -> IO [(String, String)] ; regClient = remote url "samp.hub.register"
*Network.XmlRpc.Client> :t regClient
regClient :: String -> IO [(String, String)]
*Network.XmlRpc.Client> ans <- regClient secret
*Network.XmlRpc.Client> ans
[("samp.hub-id","hub"),("samp.self-id","c1"),("samp.private-key","k:2_pplstclcoslgqbiu")]

so is the work we do in Network.SAMP.Standard.Client really necessary? Well, yes, since all
it really does is wrap this up.

TODO/THINK ABOUT:

  - move server code from examples (snooper/sender) to Network.SAMP.Standard.Server.Snap
    and add in *.HappStack/*.WAI versions. Hmm, maybe not WAI since the interface
    can abstract around the HTTP server, so perhaps *.WARP.

  - is it worth making a monad based on StateT to carry around connection info; this
    can then periodically ping the hub/check for the hub disappearing/re-appearing
    to allow it to handle hub replacements?

  - is it worth keeping the *E versions, or just work in the IO monad?

  - can we encode a type to ensure that the Server routines for a client (ASync
    Call) are only used when a server is actually set up? I don't think this is
    actually useful, just conceptually interesting for me

